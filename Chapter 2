// Example 1 without using RxJava: 
import java.util.ArrayList;
import java.util.List;
interface Observable<T> {
    void addObserver(Observer<T> observer);
    void removeObserver(Observer<T> observer);
    void notifyObservers(T data);
}

interface Subscriber<T> {
    void update(T data);
}
//Implementation of above observable
class DataStream implements Observable<Integer> {
    private final List<Observer<Integer>> observers = new ArrayList<>();
    @Override
    public void addObserver(Observer<Integer> observer) {
        observers.add(observer);
    }

    @Override
    public void removeObserver(Observer<Integer> observer) {
        observers.remove(observer);
    }
    @Override
    public void notifyObservers(Integer data) {
        for (Observer<Integer> observer : observers) {
            observer.update(data);
        }
    }
    // Simulate data emission
    public void emitData() {
        for (int i = 1; i <= 10; i++) {
            String signal = "Red Signal";
            if (i%2==0) {
                signal = "Green Signal";
            }
            System.out.println("Emitting: " + signal);
            notifyObservers(i);
            try {
                Thread.sleep(500); // Simulate delay between emissions
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
}
//Implementation of above subscriber
class PrintSubscriber implements Subscriber<Integer> {
    private final String name;
    public PrintSubscriber(String name) {
        this.name = name;
    }

    @Override
    public void update(Integer data) {
        System.out.println(name + " received: " + data);
    }
}

public class ObservablePatternExample {
    public static void main(String[] args) {
        DataStream dataStream = new DataStream();
        PrintSubscriber observer1 = new PrintSubscriber("Subscriber 1");
        PrintSubscriber observer2 = new PrintSubscriber("Subscriber 2");
        dataStream.addObserver(observer1);
        dataStream.addObserver(observer2);
        dataStream.emitData();
    }
}

// Example 2 using RxJava

Observable observable = Observable.just("Red Signal!");


Subscriber subscriber = new Subscriber<String>() {
        @Override
        public void onCompleted(){
            System.out.println("Train Stopped !");
        }
        @Override
        public void onError(Throwable e) {
        }
        @Override
        public void onNext(String s) {
            System.out.println(s);
        }
    }
observable.subscribe(subscriber);
